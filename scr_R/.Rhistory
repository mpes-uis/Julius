for (mes in meses){
for (prefeitura in 1:nrow(prefeituras_portaltp)){
for (metodo in 1:nrow(metodos)){
nome_tabela <- paste0(prefeituras_portaltp[prefeitura,3], "_",
metodos[metodo,], "_",
ano, "_",
mes)
df <- as.data.frame(consulta_portaltp(prefeituras_portaltp[prefeitura,4],
metodos[metodo,],
ano,
mes,
prefeituras_portaltp[prefeitura, 3]))
if (nrow(df) != 0) {
dbWriteTable(conn, name = metodos[metodo,], value = df, overwrite = TRUE)
cat("\033[1;32m", nome_tabela, " adicionada ao banco\n", "\033[0m")
}
}
}
}
}
}
gera_banco(prefeituras_portaltp, metodos, periodo)
periodo <- 2018:20224
periodo <- 2018:2024
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta <- "SELECT * FROM pagamentos"
resultado <- dbGetQuery(conn, consulta)
View(resultado)
View(prefeituras_portaltp)
df <- consulta_portaltp(prefeituras_portaltp[1,4], metodos[1], periodo[1], 1, prefeituras_portaltp[1,3])
df <- consulta_portaltp(prefeituras_portaltp[4,1], metodos[1], periodo[1], 1, prefeituras_portaltp[3,1])
df <- consulta_portaltp(prefeituras_portaltp[1,3], metodos[1], periodo[1], 1, prefeituras_portaltp[1,4])
df <- as.data.frame(consulta_portaltp(prefeituras_portaltp[1,4],
metodos[1,],
periodo[1],
1,
prefeituras_portaltp[1, 3]))
View(df)
gera_banco <- function(prefeituras_portaltp, metodos, periodo, meses = 1:12) {
for (ano in periodo){
for (mes in meses){
for (prefeitura in 1:nrow(prefeituras_portaltp)){
for (metodo in 1:nrow(metodos)){
nome_tabela <- paste0(prefeituras_portaltp[prefeitura,3], "_",
metodos[metodo,], "_",
ano, "_",
mes)
df <- as.data.frame(consulta_portaltp(prefeituras_portaltp[prefeitura,4],
metodos[metodo,],
ano,
mes,
prefeituras_portaltp[prefeitura, 3]))
if (nrow(df) != 0) {
dbWriteTable(conn, name = metodos[metodo,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, " adicionada ao banco\n", "\033[0m")
}
}
}
}
}
}
gera_banco(prefeituras_portaltp, metodos, periodo)
resultado <- dbGetQuery(conn, consulta)
View(resultado)
tabelas <- dbListTables(con)
tabelas <- dbListTables(con)
tabelas <- dbListTables(conn)
# Exclui cada tabela do banco de dados
for (tabela in tabelas) {
dbExecute(con, paste("DROP TABLE", tabela))
}
# Exclui cada tabela do banco de dados
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
# Exclui cada tabela do banco de dados
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
consulta <- "SELECT * FROM pagamentos"
resultado <- dbGetQuery(conn, consulta)
# Pacotes necessários
source("scripts/pacotes.R")
source("scripts/dados.R")
source("scripts/consultas_API/funcoes_consultas.R")
conn <- dbConnect(SQLite(), dbname = "banco/julius.db")
gera_banco <- function(prefeituras_portaltp, metodos, periodo, meses = 1:12) {
for (ano in periodo){
for (mes in meses){
for (prefeitura in 1:nrow(prefeituras_portaltp)){
for (metodo in 1:nrow(metodos)){
nome_tabela <- paste0(prefeituras_portaltp[prefeitura,3], "_",
metodos[metodo,], "_",
ano, "_",
mes)
df <- as.data.frame(consulta_portaltp(prefeituras_portaltp[prefeitura,4],
metodos[metodo,],
ano,
mes,
prefeituras_portaltp[prefeitura, 3]))
if (nrow(df) != 0) {
dbWriteTable(conn, name = metodos[metodo,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, " adicionada ao banco\n", "\033[0m")
}
}
}
}
}
}
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta <- "SELECT * from contratos"
df <- dbGetQuery(conn, consulta)
gera_banco(prefeituras_portaltp, metodos, periodo)
periodo <- 2018:2020
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta <- "SELECT * from contratos"
df <- dbGetQuery(conn, consulta)
View(df)
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta <- "SELECT * from frota_veiculos"
df <- dbGetQuery(conn, consulta)
View(df)
consulta_portaltp <- function(API, metodo, ano, mes, municipio) {
# montando a url e consultando a API
url <- paste0(API,"json_", metodo, "?ano=", ano, "&mes=", mes)
response <- GET(url)
# obtendo a data que a consulta foi realizada
data_consulta <- Sys.time()
# convertendo o JSON obtido para xml e armazenando a tabela
if (response["status_code"] == 200) {
data <- (content(response, "text"))
data <- gsub("<\\?xml version=\"1.0\" encoding=\"utf-8\"\\?>\r\n<string xmlns=\"http://tempuri.org/\">", "", data)
data <- gsub("</string>", "", data)
df <- fromJSON(data)
# adicionando as data frame a data da consulta e o nome do municipio
df$data_consulta <- data_consulta
df$nome_municipio <- municipio
}
else {
df <- c()
}
# retorna a tabela consultada
return(df)
}
# Obtém uma lista de todas as tabelas no banco de dados
tabelas <- dbListTables(con)
# Exclui cada tabela do banco de dados
for (tabela in tabelas) {
dbExecute(con, paste("DROP TABLE", tabela))
}
# Obtém uma lista de todas as tabelas no banco de dados
tabelas <- dbListTables(con)
# Obtém uma lista de todas as tabelas no banco de dados
tabelas <- dbListTables(conn)
# Exclui cada tabela do banco de dados
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
# Exclui cada tabela do banco de dados
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
gera_banco(prefeituras_portaltp, metodos, periodo)
# Pacotes necessários
source("scripts/pacotes.R")
source("scripts/dados.R")
source("scripts/consultas_API/funcoes_consultas.R")
# Pacotes necessários
source("scripts/pacotes.R")
source("scripts/dados.R")
source("scripts/consultas_API/funcoes_consultas.R")
conn <- dbConnect(SQLite(), dbname = "banco/julius.db")
gera_banco <- function(prefeituras_portaltp, metodos, periodo, meses = 1:12) {
for (ano in periodo){
for (mes in meses){
for (prefeitura in 1:nrow(prefeituras_portaltp)){
for (metodo in 1:nrow(metodos)){
nome_tabela <- paste0(prefeituras_portaltp[prefeitura,3], "_",
metodos[metodo,], "_",
ano, "_",
mes)
df <- as.data.frame(consulta_portaltp(prefeituras_portaltp[prefeitura,4],
metodos[metodo,],
ano,
mes,
prefeituras_portaltp[prefeitura, 3]))
if (nrow(df) != 0) {
dbWriteTable(conn, name = metodos[metodo,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, " adicionada ao banco\n", "\033[0m")
}
}
}
}
}
}
gera_banco(prefeituras_portaltp, metodos, periodo)
periodo <- 2018:2020
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta <- "SELECT * from frota_veiculos"
df <- dbGetQuery(conn, consulta)
View(df)
consulta_portaltp <- function(API, metodo, ano, mes, municipio) {
# montando a url e consultando a API
url <- paste0(API,"json_", metodo, "?ano=", ano, "&mes=", mes)
response <- GET(url)
# obtendo a data que a consulta foi realizada
data_consulta <- Sys.time()
# convertendo o JSON obtido para xml e armazenando a tabela
if (response["status_code"] == 200) {
data <- (content(response, "text"))
data <- gsub("<\\?xml version=\"1.0\" encoding=\"utf-8\"\\?>\r\n<string xmlns=\"http://tempuri.org/\">", "", data)
data <- gsub("</string>", "", data)
df <- fromJSON(data)
}
else {
df <- c()
}
if (nrow != 0) {
# adicionando as data frame a data da consulta e o nome do municipio
df$data_consulta <- data_consulta
df$nome_municipio <- municipio
}
# retorna a tabela consultada
return(df)
}
tabelas <- dbListTables(conn)
# Obtém uma lista de todas as tabelas no banco de dados
tabelas <- dbListTables(conn)
# Exclui cada tabela do banco de dados
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta_portaltp <- function(API, metodo, ano, mes, municipio) {
# montando a url e consultando a API
url <- paste0(API,"json_", metodo, "?ano=", ano, "&mes=", mes)
response <- GET(url)
# obtendo a data que a consulta foi realizada
data_consulta <- Sys.time()
# convertendo o JSON obtido para xml e armazenando a tabela
if (response["status_code"] == 200) {
data <- (content(response, "text"))
data <- gsub("<\\?xml version=\"1.0\" encoding=\"utf-8\"\\?>\r\n<string xmlns=\"http://tempuri.org/\">", "", data)
data <- gsub("</string>", "", data)
df <- fromJSON(data)
}
else {
df <- as.data.frame(c())
}
if (nrow != 0) {
# adicionando as data frame a data da consulta e o nome do municipio
df$data_consulta <- data_consulta
df$nome_municipio <- municipio
}
# retorna a tabela consultada
return(df)
}
gera_banco(prefeituras_portaltp, metodos, periodo)
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta_portaltp <- function(API, metodo, ano, mes, municipio) {
# montando a url e consultando a API
url <- paste0(API,"json_", metodo, "?ano=", ano, "&mes=", mes)
response <- GET(url)
# obtendo a data que a consulta foi realizada
data_consulta <- Sys.time()
# convertendo o JSON obtido para xml e armazenando a tabela
if (response["status_code"] == 200) {
data <- (content(response, "text"))
data <- gsub("<\\?xml version=\"1.0\" encoding=\"utf-8\"\\?>\r\n<string xmlns=\"http://tempuri.org/\">", "", data)
data <- gsub("</string>", "", data)
df <- fromJSON(data)
}
else {
df <- c()
}
if (nrow(df) != 0) {
# adicionando as data frame a data da consulta e o nome do municipio
df$data_consulta <- data_consulta
df$nome_municipio <- municipio
}
# retorna a tabela consultada
return(df)
}
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta_portaltp <- function(API, metodo, ano, mes, municipio) {
# montando a url e consultando a API
url <- paste0(API,"json_", metodo, "?ano=", ano, "&mes=", mes)
response <- GET(url)
# obtendo a data que a consulta foi realizada
data_consulta <- Sys.time()
# convertendo o JSON obtido para xml e armazenando a tabela
if (response["status_code"] == 200) {
data <- (content(response, "text"))
data <- gsub("<\\?xml version=\"1.0\" encoding=\"utf-8\"\\?>\r\n<string xmlns=\"http://tempuri.org/\">", "", data)
data <- gsub("</string>", "", data)
df <- fromJSON(data)
}
else {
df <- da.data.frame(c())
}
if (nrow(df) != 0) {
# adicionando as data frame a data da consulta e o nome do municipio
df$data_consulta <- data_consulta
df$nome_municipio <- municipio
}
# retorna a tabela consultada
return(df)
}
# Obtém uma lista de todas as tabelas no banco de dados
tabelas <- dbListTables(conn)
# Exclui cada tabela do banco de dados
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
# Obtém uma lista de todas as tabelas no banco de dados
tabelas <- dbListTables(conn)
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta_portaltp <- function(API, metodo, ano, mes, municipio) {
# montando a url e consultando a API
url <- paste0(API,"json_", metodo, "?ano=", ano, "&mes=", mes)
response <- GET(url)
# obtendo a data que a consulta foi realizada
data_consulta <- Sys.time()
# convertendo o JSON obtido para xml e armazenando a tabela
if (response["status_code"] == 200) {
data <- (content(response, "text"))
data <- gsub("<\\?xml version=\"1.0\" encoding=\"utf-8\"\\?>\r\n<string xmlns=\"http://tempuri.org/\">", "", data)
data <- gsub("</string>", "", data)
df <- fromJSON(data)
}
else {
df <- as.data.frame(c())
}
if (nrow(df) != 0) {
# adicionando as data frame a data da consulta e o nome do municipio
df$data_consulta <- data_consulta
df$nome_municipio <- municipio
}
# retorna a tabela consultada
return(df)
}
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta_portaltp <- function(API, metodo, ano, mes, municipio) {
# montando a url e consultando a API
url <- paste0(API,"json_", metodo, "?ano=", ano, "&mes=", mes)
response <- GET(url)
# obtendo a data que a consulta foi realizada
data_consulta <- Sys.time()
# convertendo o JSON obtido para xml e armazenando a tabela
if (response["status_code"] == 200) {
data <- (content(response, "text"))
data <- gsub("<\\?xml version=\"1.0\" encoding=\"utf-8\"\\?>\r\n<string xmlns=\"http://tempuri.org/\">", "", data)
data <- gsub("</string>", "", data)
df <- as.data.frame(fromJSON(data))
}
else {
df <- as.data.frame(c())
}
if (nrow(df) != 0) {
# adicionando as data frame a data da consulta e o nome do municipio
df$data_consulta <- data_consulta
df$nome_municipio <- municipio
}
# retorna a tabela consultada
return(df)
}
gera_banco(prefeituras_portaltp, metodos, periodo)
consulta <- "SELECT * from frota_veiculos"
df <- dbGetQuery(conn, consulta)
View(df)
source("~/GitHub/Julius/scr_R/scripts/main.R")
View(prefeituras)
df <- as.data.frame(consulta_portaltp(prefeituras[20,4],
metodos[1,],
periodo[1],
1,
prefeituras_portaltp[1, 3]))
df <- as.data.frame(consulta_portaltp(prefeituras[9,4],
metodos[1,],
periodo[1],
1,
prefeituras_portaltp[1, 3]))
View(df)
aa <- GET(paste0(prefeituras[9,4], metodos[1], 2020, 1, prefeituras[9,3]))
paste0(prefeituras[9,4], metodos[1], 2020, 1, prefeituras[9,3])
aa <- GET(paste0(prefeituras[9,4], metodos[1,], 2020, 1, prefeituras[9,3]))
View(aa)
?subset
?append
prefeituras_portaltp <- subset(prefeituras, empresa == "portaltp")
prefeituras_portaltp <- append(subset(prefeituras, empresa == "Tectrilha"))
prefeituras_portaltp <- subset(prefeituras, empresa == "Tectrilha")
prefeituras_portaltp <- subset(prefeituras, empresa == "portaltp")
prefeituras_portaltp <- c(subset(prefeituras, empresa == "Tectrilha"))
View(prefeituras_portaltp)
prefeituras_portaltp <- c(subset(prefeituras, empresa == "Tectrilha"),)
prefeituras_portaltp <- subset(prefeituras, empresa == "Tectrilha")
prefeituras_portaltp <- subset(prefeituras, empresa == "portaltp")
prefeituras_portaltp <- subset(prefeituras, empresa == "Tectrilha")
prefeituras_portaltp <- subset(prefeituras, empresa == "portaltp")
prefeituras_portaltp <- subset(prefeituras, empresa == "Tectrilha", empresa == "portaltp")
prefeituras_portaltp <- subset(prefeituras, empresa == "Tectrilha" or empresa == "portaltp")
prefeituras_portaltp <- subset(prefeituras, empresa == "Tectrilha")
prefeituras_portaltp <- subset(prefeituras, empresa == "portaltp")
prefeituras_portaltp <- cbind(subset(prefeituras, empresa == "portaltp"),
subset(prefeituras, empresa == "Tectrilha"))
prefeituras_portaltp <- rbind(subset(prefeituras, empresa == "portaltp"),
subset(prefeituras, empresa == "Tectrilha"))
prefeituras_alphatec <- subset(prefeituras, empresa == "Alphatec")
# Obtém uma lista de todas as tabelas no banco de dados
tabelas <- dbListTables(conn)
# Exclui cada tabela do banco de dados
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
source("~/GitHub/Julius/scr_R/scripts/main.R")
aa <- GET(paste0(prefeituras[9,4], "json_", metodos[1], "?ano=" 2020, "&mes=" 1))
aa <- GET(paste0(prefeituras[9,4], "json_", metodos[1], "?ano=", 2020, "&mes=" 1))
aa <- GET(paste0(prefeituras[9,4], "json_", metodos[1], "?ano=", 2020, "&mes=", 1))
aa <- GET(paste0(prefeituras[10,4], "json_", metodos[1], "?ano=", 2020, "&mes=", 1))
aa <- GET(paste0(prefeituras[8,4], "json_", metodos[1], "?ano=", 2020, "&mes=", 1))
aa <- GET(paste0(prefeituras[1,4], "json_", metodos[1], "?ano=", 2020, "&mes=", 1))
aa <- GET(paste0(prefeituras[1,4], "json_", metodos[1,], "?ano=", 2020, "&mes=", 1))
View(aa)
data <- (content(response, "text"))
response["status_code"]
aa["status_code"]
data <- (content(aa, "text"))
aa <- GET(paste0(prefeituras[9,4], "json_", metodos[1,], "?ano=", 2020, "&mes=", 1))
View(aa)
response <- GET(paste0(prefeituras[9,4], "json_", metodos[1,], "?ano=", 2020, "&mes=", 1))
data <- (content(response, "text"))
response <- GET(paste0(prefeituras[10,4], "json_", metodos[1,], "?ano=", 2020, "&mes=", 1))
data <- (content(response, "text"))
response["status_code"]
source("~/GitHub/Julius/scr_R/scripts/main.R")
source("~/GitHub/Julius/scr_R/scripts/main.R")
source("~/GitHub/Julius/scr_R/scripts/main.R")
limpa_banco <- function(banco) {
conn <- dbConnect(SQLite(), dbname = banco)
tabelas <- dbListTables(conn)
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
dbDisconnect(conn)
cat("O banco de dados foi limpo com sucesso.\n")
}
limpa_banco(banco/julius.db)
limpa_banco("banco/julius.db")
source("~/GitHub/Julius/scr_R/scripts/main.R")
View(prefeituras_agape)
View(prefeituras_alphatec)
View(prefeituras_tectrilha)
GET("https://www.anchieta.es.gov.br/transparencia/api/")
teste <- GET("https://www.anchieta.es.gov.br/transparencia/api/")
View(teste)
response <- GET("https://www.anchieta.es.gov.br/transparencia/api/")
data <- (content(response, "text"))
data
View(metodos)
response <- GET("https://www.anchieta.es.gov.br/transparencia/api/json_licitacoes?ano=2020$&mes=1")
data <- (content(response, "text"))
response <- GET("https://www.anchieta.es.gov.br/transparencia/api/json_licitacoes?ano=2020$&mes=1")
data <- (content(response, "text"))
data
response <- GET("https://www.anchieta.es.gov.br/transparencia/api/json_licitacoes?ano=2020$&mes=2")
data <- (content(response, "text"))
data
source("~/GitHub/Julius/scr_R/scripts/consultas_API/consulta_agape.R")
source("~/GitHub/Julius/scr_R/scripts/consultas_API/consulta_agape.R")
data
source("~/GitHub/Julius/scr_R/scripts/consultas_API/consulta_agape.R")
response <- GET("https://www.anchieta.es.gov.br/transparencia/api/json_licitacoes?ano=2022&mes=2")
data <- (content(response, "text"))
data
response <- GET("https://www.anchieta.es.gov.br/transparencia/api/json_licitacoes?ano=2022&mes=1")
response <- GET("https://www.anchieta.es.gov.br/transparencia/api/orcamento_receita")
data <- (content(response, "text"))
data
data <- fromJSON(data)
data
View(data)
?content
View(data)
data[1]
data[[1]
data[[1]]
View(data)
data[["pagina_atual"]]
data
data[["pagina_total"]]
data[["pagina_atual"]]
data[["pagina_anterior"]]
data[["pagina_proxima"]]
data[["registro_total"]]
data[["registro_atual"]]
data[["registros"]]
View(prefeituras_alphatec)
source("~/GitHub/Julius/scr_R/scripts/main.R")
source("~/GitHub/Julius/scr_R/scripts/main.R")
source("~/GitHub/Julius/scr_R/scripts/main.R")
limpa_banco <- function(banco) {
conn <- dbConnect(SQLite(), dbname = banco)
tabelas <- dbListTables(conn)
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
dbDisconnect(conn)
cat("O banco de dados foi limpo com sucesso.\n")
}
limpa_banco("dados/julius.db")
assuntos_portaltp <- read.csv("Julius\data\assuntos_portaltp.csv")
