for (prefeitura in 1:nrow(prefeituras_agape)) {
for (assunto in 1:nrow(assuntos_agape)) {
url <- paste0(prefeituras_agape[prefeitura,4], assuntos_agape[assunto,], "?page_size=100&page=", 1)
response <- GET(url)
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
paginas <- data[["pagina_total"]]
for(pagina in 1:paginas) {
nome_tabela <- paste0(prefeituras_agape[prefeitura,3], "_",
assuntos_agape[assunto,], "_pagina_", pagina)
consulta <- paste0("SELECT EXISTS (SELECT 1 FROM log WHERE tabelas_adicionadas = '",
nome_tabela, "') AS linha_existe;")
resultado <- dbGetQuery(conn, consulta)
if (resultado == 0) {
df <- consulta_agape(prefeituras_agape[prefeitura, 4],
assuntos_agape[assunto,], pagina)
if (length(df) != 0) {
if(!is.na(df)[1]) {
dbWriteTable(conn, name = assuntos_agape[assunto,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
log <- data.frame(tabelas_adicionadas = nome_tabela)
dbWriteTable(conn, name = "log", value = log, append = TRUE)
}
}
}
else {
cat("\033[1;32m", nome_tabela, "de", paginas, "ja esta no banco agape\n", "\033[0m")
}
}
}
}
}
gera_agape(prefeituras_agape, assuntos_agape)
gera_agape <- function(prefeituras_agape, assuntos_agape) {
conn <- dbConnect(SQLite(), dbname = "output_R/agape.db")
log <- data.frame(tabelas_adicionadas = "")
dbWriteTable(conn, name = "log", value = log, append = TRUE)
for (prefeitura in 1:nrow(prefeituras_agape)) {
for (assunto in 1:nrow(assuntos_agape)) {
url <- paste0(prefeituras_agape[prefeitura,4], assuntos_agape[assunto,], "?page_size=100&page=", 1)
response <- GET(url)
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
paginas <- data[["pagina_total"]]
for(pagina in 1:paginas) {
nome_tabela <- paste0(prefeituras_agape[prefeitura,3], "_",
assuntos_agape[assunto,], "_pagina_", pagina)
consulta <- paste0("SELECT EXISTS (SELECT 1 FROM log WHERE tabelas_adicionadas = '",
nome_tabela, "') AS linha_existe;")
resultado <- dbGetQuery(conn, consulta)
if (resultado == 0) {
df <- consulta_agape(prefeituras_agape[prefeitura, 4],
assuntos_agape[assunto,], pagina)
if (length(df) != 0) {
if(!is.na(df)[1]) {
dbWriteTable(conn, name = assuntos_agape[assunto,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
log <- data.frame(tabelas_adicionadas = nome_tabela)
dbWriteTable(conn, name = "log", value = log, append = TRUE)
}
else {
cat("\033[1;32m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;32m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;32m", nome_tabela, "de", paginas, "ja esta no banco agape\n", "\033[0m")
}
}
}
}
}
gera_agape <- function(prefeituras_agape, assuntos_agape) {
conn <- dbConnect(SQLite(), dbname = "output_R/agape.db")
log <- data.frame(tabelas_adicionadas = "")
dbWriteTable(conn, name = "log", value = log, append = TRUE)
for (prefeitura in 1:nrow(prefeituras_agape)) {
for (assunto in 1:nrow(assuntos_agape)) {
url <- paste0(prefeituras_agape[prefeitura,4], assuntos_agape[assunto,], "?page_size=100&page=", 1)
response <- GET(url)
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
paginas <- data[["pagina_total"]]
for(pagina in 1:paginas) {
nome_tabela <- paste0(prefeituras_agape[prefeitura,3], "_",
assuntos_agape[assunto,], "_pagina_", pagina)
consulta <- paste0("SELECT EXISTS (SELECT 1 FROM log WHERE tabelas_adicionadas = '",
nome_tabela, "') AS linha_existe;")
resultado <- dbGetQuery(conn, consulta)
if (resultado == 0) {
df <- consulta_agape(prefeituras_agape[prefeitura, 4],
assuntos_agape[assunto,], pagina)
if (length(df) != 0) {
if(!is.na(df)[1]) {
dbWriteTable(conn, name = assuntos_agape[assunto,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
log <- data.frame(tabelas_adicionadas = nome_tabela)
dbWriteTable(conn, name = "log", value = log, append = TRUE)
}
else {
cat("\033[1;32m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;32m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;33m", nome_tabela, "de", paginas, "ja esta no banco agape\n", "\033[0m")
}
}
}
}
}
gera_agape(prefeituras_agape, assuntos_agape)
gera_agape <- function(prefeituras_agape, assuntos_agape) {
conn <- dbConnect(SQLite(), dbname = "output_R/agape.db")
log <- data.frame(tabelas_adicionadas = "")
dbWriteTable(conn, name = "log", value = log, append = TRUE)
for (prefeitura in 1:nrow(prefeituras_agape)) {
for (assunto in 1:nrow(assuntos_agape)) {
url <- paste0(prefeituras_agape[prefeitura,4], assuntos_agape[assunto,], "?page_size=100&page=", 1)
response <- GET(url)
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
paginas <- data[["pagina_total"]]
for(pagina in 1:paginas) {
nome_tabela <- paste0(prefeituras_agape[prefeitura,3], "_",
assuntos_agape[assunto,], "_pagina_", pagina)
consulta <- paste0("SELECT EXISTS (SELECT 1 FROM log WHERE tabelas_adicionadas = '",
nome_tabela, "') AS linha_existe;")
resultado <- dbGetQuery(conn, consulta)
if (resultado == 0) {
df <- consulta_agape(prefeituras_agape[prefeitura, 4],
assuntos_agape[assunto,], pagina)
if (length(df) != 0) {
if(!is.na(df)[1]) {
dbWriteTable(conn, name = assuntos_agape[assunto,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
log <- data.frame(tabelas_adicionadas = nome_tabela)
dbWriteTable(conn, name = "log", value = log, append = TRUE)
}
else {
cat("\033[1;34m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;34m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;33m", nome_tabela, "de", paginas, "ja esta no banco agape\n", "\033[0m")
}
}
}
}
}
gera_agape(prefeituras_agape, assuntos_agape)
gera_agape(prefeituras_agape, assuntos_agape)
# Pacotes necessÃ¡rios
source("scr_r/pacotes.R")
gera_agape(prefeituras_agape, assuntos_agape)
consulta_agape <- function(API, assunto, pagina) {
url <- paste0(API, assunto, "?page_size=100&page=", pagina)
response <- GET(url)
if (response["status_code"] == 200) {
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
df <- data[["registros"]]
if (length(df) == 0){
df <- data.frame()
}
}
else {
df <- data.frame()
}
return(df)
}
gera_agape(prefeituras_agape, assuntos_agape)
consulta_agape <- function(API, assunto, pagina) {
url <- paste0(API, assunto, "?page_size=100&page=", pagina)
response <- GET(url)
if (status_code(response) == 200) {
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
df <- data[["registros"]]
if (length(df) == 0){
df <- NULL
}
}
else {
df <- NULL
}
return(df)
}
consulta_agape <- function(API, assunto, pagina) {
url <- paste0(API, assunto, "?page_size=100&page=", pagina)
response <- GET(url)
if (status_code(response) == 200) {
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
df <- data[["registros"]]
if (length(df) == 0){
df <- NULL
}
}
else {
df <- NULL
}
return(df)
}
gera_agape(prefeituras_agape, assuntos_agape)
View(assuntos_agape)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 1)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 2)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[7,], 390)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[7,], 389)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 1)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 2)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 1)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 2)
View(df)
consulta_agape <- function(API, assunto, pagina) {
url <- paste0(API, assunto, "?page_size=100&page=", pagina)
response <- GET(url)
if (status_code(response) == 200) {
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
if ("registros" %in% names(data)) {
df <- data[["registros"]]
} else {
df <- NULL
}
} else {
df <- NULL
}
return(df)
}
g
gera_agape(prefeituras_agape, assuntos_agape)
View(assuntos_agape)
View(prefeituras_agape)
gera_agape <- function(prefeituras_agape, assuntos_agape) {
conn <- dbConnect(SQLite(), dbname = "output_R/agape.db")
log <- data.frame(tabelas_adicionadas = "")
dbWriteTable(conn, name = "log", value = log, append = TRUE)
for (prefeitura in 1:nrow(prefeituras_agape)) {
for (assunto in 1:nrow(assuntos_agape)) {
url <- paste0(prefeituras_agape[prefeitura,4], assuntos_agape[assunto,], "?page_size=100&page=", 1)
response <- GET(url)
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
paginas <- data[["pagina_total"]]
for(pagina in 1:paginas) {
nome_tabela <- paste0(prefeituras_agape[prefeitura,3], "_",
assuntos_agape[assunto,], "_pagina_", pagina)
consulta <- paste0("SELECT EXISTS (SELECT 1 FROM log WHERE tabelas_adicionadas = '",
nome_tabela, "') AS linha_existe;")
resultado <- dbGetQuery(conn, consulta)
if (resultado == 0) {
df <- consulta_agape(prefeituras_agape[prefeitura, 4],
assuntos_agape[assunto,], pagina,
prefeituras_agape[prefeitura, 3])
if (length(df) != 0) {
if(!is.na(df)[1]) {
dbWriteTable(conn, name = assuntos_agape[assunto,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
log <- data.frame(tabelas_adicionadas = nome_tabela)
dbWriteTable(conn, name = "log", value = log, append = TRUE)
}
else {
cat("\033[1;34m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;34m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;33m", nome_tabela, "de", paginas, "ja esta no banco agape\n", "\033[0m")
}
}
}
}
}
consulta_agape <- function(API, assunto, pagina, municipio) {
url <- paste0(API, assunto, "?page_size=100&page=", pagina)
response <- GET(url)
data_consulta <- Sys.time()
if (status_code(response) == 200) {
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
df <- data[["registros"]]
}
else {
df <- NULL
}
if (nrow(df) != 0) {
df$data_consulta <- data_consulta
df$nome_municipio <- municipio
}
return(df)
}
#banco agape
{
inicio_agape <- Sys.time()
gera_agape(prefeituras_agape, assuntos_agape)
fim_agape <- Sys.time()
tempo_agape <- difftime(fim_agape, inicio_agape)
}
consulta_agape <- function(API, assunto, pagina, municipio) {
url <- paste0(API, assunto, "?page_size=100&page=", pagina)
response <- GET(url)
data_consulta <- Sys.time()
if (status_code(response) == 200) {
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
df <- data[["registros"]]
}
else {
df <- NULL
}
if (length(df) != 0) {
df$data_consulta <- data_consulta
df$nome_municipio <- municipio
}
return(df)
}
gera_agape <- function(prefeituras_agape, assuntos_agape) {
conn <- dbConnect(SQLite(), dbname = "output_R/agape.db")
log <- data.frame(tabelas_adicionadas = "")
dbWriteTable(conn, name = "log", value = log, append = TRUE)
for (prefeitura in 1:nrow(prefeituras_agape)) {
for (assunto in 1:nrow(assuntos_agape)) {
url <- paste0(prefeituras_agape[prefeitura,4], assuntos_agape[assunto,], "?page_size=100&page=", 1)
response <- GET(url)
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
paginas <- data[["pagina_total"]]
for(pagina in 1:paginas) {
nome_tabela <- paste0(prefeituras_agape[prefeitura,3], "_",
assuntos_agape[assunto,], "_pagina_", pagina)
consulta <- paste0("SELECT EXISTS (SELECT 1 FROM log WHERE tabelas_adicionadas = '",
nome_tabela, "') AS linha_existe;")
resultado <- dbGetQuery(conn, consulta)
if (resultado == 0) {
df <- consulta_agape(prefeituras_agape[prefeitura, 4],
assuntos_agape[assunto,], pagina,
prefeituras_agape[prefeitura, 3])
if (length(df) != 0) {
if(!is.na(df)[1]) {
dbWriteTable(conn, name = assuntos_agape[assunto,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
log <- data.frame(tabelas_adicionadas = nome_tabela)
dbWriteTable(conn, name = "log", value = log, append = TRUE)
}
else {
cat("\033[1;34m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;34m", nome_tabela, "de", paginas, "esta vazia\n", "\033[0m")
}
}
else {
cat("\033[1;33m", nome_tabela, "de", paginas, "ja esta no banco agape\n", "\033[0m")
}
}
}
}
dbDisconnect(conn)
}
#banco agape
{
inicio_agape <- Sys.time()
gera_agape(prefeituras_agape, assuntos_agape)
fim_agape <- Sys.time()
tempo_agape <- difftime(fim_agape, inicio_agape)
}
warnings()
limpa_banco("output_R/agape.db")
limpa_banco <- function(banco) {
conn <- dbConnect(SQLite(), dbname = banco)
tabelas <- dbListTables(conn)
for (tabela in tabelas) {
dbExecute(conn, paste("DROP TABLE", tabela))
}
dbDisconnect(conn)
cat("O banco de dados foi limpo com sucesso.\n")
}
limpa_banco("output_R/agape.db")
#banco agape
{
inicio_agape <- Sys.time()
gera_agape(prefeituras_agape, assuntos_agape)
fim_agape <- Sys.time()
tempo_agape <- difftime(fim_agape, inicio_agape)
}
gera_agape(prefeituras_agape, assuntos_agape)
warnings()
consulta_agape <- function(API, assunto, pagina, municipio) {
url <- paste0(API, assunto, "?page_size=100&page=", pagina)
response <- GET(url)
data_consulta <- Sys.time()
if (status_code(response) == 200) {
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
df <- data[["registros"]]
}
else {
df <- NULL
}
if (length(df) != 0) {
#df$data_consulta <- data_consulta
#df$nome_municipio <- municipio
}
return(df)
}
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], pagina,
prefeituras_agape[1, 3])
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 1,
prefeituras_agape[1, 3])
url <- paste0(prefeituras_agape[1,4], assuntos_agape[8,], "?page_size=100&page=", 1)
response <- GET(url)
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
paginas <- data[["pagina_total"]]
View(data)
url <- paste0(prefeituras_agape[1,4], assuntos_agape[7,], "?page_size=100&page=", 1)
response <- GET(url)
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
View(data)
url <- paste0(prefeituras_agape[1,4], assuntos_agape[8,], "?page_size=100&page=", 1)
response <- GET(url)
json <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(json)
View(data)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 1,
prefeituras_agape[1, 3])
debug(consulta_aga[e])
debug(consulta_agape)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 1,
prefeituras_agape[1, 3])
if (length(df) != 0) {
dbWriteTable(conn, name = assuntos_agape[assunto,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
log <- data.frame(tabelas_adicionadas = nome_tabela)
dbWriteTable(conn, name = "log", value = log, append = TRUE)
}
conn <- dbConnect(SQLite(), dbname = "output_R/agape.db")
length(df) != 0
dbWriteTable(conn, name = assuntos_agape[8,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
View(df)
View(df[[10]][[1]])
df <- df[-vencedores]
df <- df[,-vencedores]
df <- df[-vencedores,]
df <- df[-"vencedores"]
df <- df["vencedores"]
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 1,
prefeituras_agape[1, 3])
c
c
c
c
c
c
df <- df[1]
View(df)
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 1,
prefeituras_agape[1, 3])
View(df)
df <- df[1,2,3,4,5,6,7,8,9,11,12,13]
df <- df[c(1,2,3,4,5,6,7,8,9,11,12,13)]
View(df)
if (length(df) != 0) {
dbWriteTable(conn, name = assuntos_agape[8,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
log <- data.frame(tabelas_adicionadas = nome_tabela)
dbWriteTable(conn, name = "log", value = log, append = TRUE)
}
ddbWriteTable(conn, name = assuntos_agape[8,], value = df, append = TRUE)
# Pacotes necessÃ¡rios
source("scr_r/pacotes.R")
dbWriteTable(conn, name = assuntos_agape[8,], value = df, append = TRUE)
cat("\033[1;32m", nome_tabela, "de", paginas, "adicionada ao banco agape\n", "\033[0m")
df <- consulta_agape(prefeituras_agape[1, 4],
assuntos_agape[8,], 1,
prefeituras_agape[1, 3])
View(df)
View(df[[10]][[1]])
View(df[[15]][[1]])
View(df[[15]][[90]])
